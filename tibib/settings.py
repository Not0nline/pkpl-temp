"""
Django settings for tibib project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dotenv
import base64
from cryptography.hazmat.primitives import serialization
dotenv.load_dotenv()

JWT_SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'your-very-secret-key')
API_URL = os.getenv('API_URL', 'http://localhost:8000')
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:8001')
JWT_ALGORITHM = 'HS256'
JWT_EXPIRATION_SECONDS = 3600  # 1 hour

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

BASE_BACKEND_URL = os.getenv('BASE_BACKEND_URL', 'http://localhost:8000/')

# Get keys
sender_private_key_pem = os.getenv("SENDER_PRIVATE_KEY5", "").replace("\\n", "\n").strip()
sender_public_key_pem = os.getenv("SENDER_PUBLIC_KEY6", "").replace("\\n", "\n").strip()
receiver_private_key_pem = os.getenv("RECEIVER_PRIVATE_KEY7", "").replace("\\n", "\n").strip()
receiver_public_key_pem = os.getenv("RECEIVER_PUBLIC_KEY8", "").replace("\\n", "\n").strip()

if receiver_private_key_pem and receiver_public_key_pem and sender_private_key_pem and sender_public_key_pem:
    try:
        RECEIVER_PRIVATE_KEY = serialization.load_pem_private_key(
            receiver_private_key_pem.encode("utf-8"),
            password=None
        )

        RECEIVER_PUBLIC_KEY = serialization.load_pem_public_key(
            receiver_public_key_pem.encode("utf-8")
        )

        SENDER_PRIVATE_KEY = serialization.load_pem_private_key(
            sender_private_key_pem.encode("utf-8"),
            password=None
        )

        SENDER_PUBLIC_KEY = serialization.load_pem_public_key(
            sender_public_key_pem.encode("utf-8")
        )

    except ValueError as e:
        raise RuntimeError(f"Error loading RSA keys: {e}")

else:
    RECEIVER_PRIVATE_KEY = None
    RECEIVER_PUBLIC_KEY = None
    SENDER_PRIVATE_KEY = None
    SENDER_PUBLIC_KEY = None
    raise RuntimeError("RSA keys are missing in the environment variables.")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)_u#ywcrhs4)&0bky8c9^wkdpumm#qs@)&2uif1-ba3k-*pqs6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard',
    'auth_page',
    'reksadana_rest',
    'portfolio',
    'staff',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # Session middleware must come first
    'tibib.middleware.JWTAuthenticationMiddleware',          # Then our custom JWT middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tibib.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'tibib.context_processors.auth_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'tibib.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
STATIC_URL = '/static/'

if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

if DEBUG:
    STATICFILES_DIRS = [
        Path('') / 'static'
    ]
else:
    STATIC_ROOT = Path('') / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
